<c:ValidationWindow x:Class="De.Hochstaetter.FroniusMonitor.Views.WattPilotSettingsView"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:p="clr-namespace:De.Hochstaetter.Fronius.Localization;assembly=Fronius"
                    xmlns:vm="clr-namespace:De.Hochstaetter.FroniusMonitor.ViewModels"
                    xmlns:co="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Converters"
                    xmlns:v="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Validation"
                    xmlns:c="clr-namespace:De.Hochstaetter.FroniusMonitor.Controls"
                    xmlns:gl="clr-namespace:System.Globalization;assembly=System.Runtime"
                    xmlns:m="clr-namespace:De.Hochstaetter.Fronius.Models.Charging;assembly=Fronius"
                    mc:Ignorable="d"
                    Title="{Binding Title}" SizeToContent="WidthAndHeight" ResizeMode="CanMinimize"
                    d:DataContext="{d:DesignInstance Type=vm:WattPilotSettingsViewModel}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.Resources>
            <Style TargetType="Button">
                <Setter Property="Margin" Value="8,0,0,0" />
                <Setter Property="MinHeight" Value="30" />
                <Setter Property="MinWidth" Value="70" />
                <Setter Property="Padding" Value="8,0" />
            </Style>

            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Margin" Value="0,4,0,4" />
                <Setter Property="Opacity" Value="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={co:Bool2Double True=1, False=.5}}" />
            </Style>
            <Style TargetType="ComboBox" x:Key="StandardComboBox">
                <Setter Property="Margin" Value="8,4,0,4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource StandardComboBox}" />
            <Style TargetType="TextBox" x:Key="StandardTextBox">
                <Setter Property="Width" Value="100" />
                <Setter Property="MinHeight" Value="26" />
                <Setter Property="Margin" Value="8,4,0,4" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
                <EventSetter Event="Validation.Error" Handler="OnValidationChanged" />
            </Style>
            <Style TargetType="TextBox" BasedOn="{StaticResource StandardTextBox}" />
            <Style TargetType="c:PasswordBox" BasedOn="{StaticResource StandardTextBox}">
                <Setter Property="Template" Value="{StaticResource PasswordBoxTemplate}" />
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="Margin" Value="0,8,0,0" />
            </Style>
        </Grid.Resources>

        <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
            <GroupBox Margin="8,8,8,0" Header="{x:Static p:Resources.BaseSettings}">
                <StackPanel Margin="8" Grid.IsSharedSizeScope="True">

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G1" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G2" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G3" />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static p:Resources.WattPilotName}" />
                        <TextBlock Grid.Column="1" Grid.Row="0" Text=":" />
                        <TextBox Grid.Column="2" Grid.Row="0" MinWidth="250" MaxLength="32" Text="{Binding WattPilot.DeviceName}" />

                        <TextBlock Grid.Column="0" Grid.Row="1" Text="{x:Static p:Resources.WifiSsid}" />
                        <TextBlock Grid.Column="1" Grid.Row="1" Text=":" />
                        <TextBox Grid.Column="2" Grid.Row="1" MinWidth="250" MaxLength="32" Text="{Binding WattPilot.WattPilotSsid}" />

                        <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static p:Resources.WattPilotWifiPassword}" />
                        <TextBlock Grid.Column="1" Grid.Row="2" Text=":" />
                        <c:PasswordBox Grid.Column="2" Grid.Row="2" MinWidth="250" MaxLength="32" Password="{Binding WattPilotWifiPassword}" />

                        <TextBlock Grid.Column="0" Grid.Row="3" Text="{x:Static p:Resources.CableLockBehavior}" />
                        <TextBlock Grid.Column="1" Grid.Row="3" Text=":" />
                        <ComboBox Grid.Column="2" Grid.Row="3" MinWidth="250" ItemsSource="{Binding CableLockBehaviors}" SelectedItem="{Binding WattPilot.CableLockBehavior}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static p:Resources.ChargingLogic}" />
                        <TextBlock Grid.Column="1" Grid.Row="4" Text=":" />
                        <ComboBox x:Name="ChargingLogicBox" Grid.Column="2" Grid.Row="4" MinWidth="250" ItemsSource="{Binding ChargingLogicList}" SelectionChanged="OnChargingLogicChanged" SelectedItem="{Binding WattPilot.ChargingLogic}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock Grid.Column="0" Grid.Row="5" Text="{x:Static p:Resources.ForcedCharge}" />
                        <TextBlock Grid.Column="1" Grid.Row="5" Text=":" />
                        <ComboBox Grid.Column="2" Grid.Row="5" MinWidth="250" ItemsSource="{Binding ForcedChargeList}" SelectedItem="{Binding WattPilot.ForcedCharge}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock IsEnabled="{Binding EnableDanger}" Grid.Column="0" Grid.Row="6" Text="{x:Static p:Resources.ApiKey}" />
                        <TextBlock IsEnabled="{Binding EnableDanger}" Grid.Column="1" Grid.Row="6" Text=":" />
                        <c:PasswordBox IsReadOnly="{Binding EnableDanger, Converter={co:BoolInverter}}" Grid.Column="2" Grid.Row="6" MinWidth="250" Password="{Binding WattPilot.CloudAccessKey}" />
                    </Grid>

                    <CheckBox IsEnabled="{Binding EnableDanger}" IsChecked="{Binding WattPilot.IsWifiClientEnabled}">
                        <TextBlock Margin="0" Text="{x:Static p:Resources.IsWifiClientEnabled}" />
                    </CheckBox>
                    <CheckBox Content="{x:Static p:Resources.UnlockCableOnPowerFailure}" IsChecked="{Binding WattPilot.UnlockCableOnPowerFailure}" />
                    <CheckBox IsEnabled="{Binding EnableDanger}" IsChecked="{Binding WattPilot.LoadBalancingEnabled}">
                        <TextBlock Margin="0" Text="{x:Static p:Resources.EnableLoadBalancing}" />
                    </CheckBox>
                    <CheckBox Content="{x:Static p:Resources.RequireRfidAuth}" IsChecked="{Binding WattPilot.AccessMode, Converter={co:AccessMode2Bool}}" />
                    <CheckBox Content="{x:Static p:Resources.AuthCurrentUser}" IsChecked="{Binding IsUserAuthenticated}" />
                    <CheckBox IsChecked="{Binding WattPilot.CloudAccessEnabled}">
                        <TextBlock Margin="0">
                            <Run Text="{x:Static p:Resources.EnableApiLink}" />
                            <Hyperlink Command="{Binding NavigateToApiCommand}">
                                <TextBlock Margin="0" Text="{Binding ApiLink}" />
                            </Hyperlink>
                        </TextBlock>
                    </CheckBox>
                    <CheckBox IsEnabled="{Binding EnableDanger}" IsChecked="{Binding WattPilot.DisableProtectiveEarth}">
                        <TextBlock Margin="0" Text="{x:Static p:Resources.DisableProtectiveEarth}" />
                    </CheckBox>
                    <CheckBox IsChecked="{Binding WattPilot.ButtonEnableCurrentSelection}" Content="{x:Static p:Resources.ButtonEnableCharging}" />
                    <CheckBox IsChecked="{Binding WattPilot.ButtonEnableModeSwitch}" Content="{x:Static p:Resources.ButtonEnableModeSwitch}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MaximumChargingCurrent}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MaximumChargingCurrent, Rule={v:MinMaxIntRule PropertyDisplayName={x:Static p:Resources.MaximumChargingCurrent}, Minimum=0, Maximum=32}}" />
                        <TextBlock Margin="4,0,0,0" Text="A" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MaximumChargingCurrent, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="{Binding WattPilot.MinimumChargingCurrent}" Maximum="{Binding WattPilot.AbsoluteMaximumChargingCurrent}" />

                    <StackPanel IsEnabled="{Binding EnableDanger}" Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.AbsoluteMaximumChargingCurrent}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.AbsoluteMaximumChargingCurrent, Rule={v:MinMaxIntRule PropertyDisplayName={x:Static p:Resources.AbsoluteMaximumChargingCurrent}, Minimum=0, Maximum=32}}" />
                        <TextBlock Margin="4,0,0,0" Text="A" />
                    </StackPanel>
                    <Slider IsEnabled="{Binding EnableDanger}" Value="{Binding WattPilot.AbsoluteMaximumChargingCurrent, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="6" Maximum="{Binding WattPilot.Is16AmpereVariant, Converter={co:Bool2Double Null=32, False=32, True=16}}" />

                    <StackPanel IsEnabled="{Binding EnableDanger}" Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MaximumChargingCurrentPhase1}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MaximumChargingCurrentPhase1, Rule={v:MinMaxIntRule PropertyDisplayName={x:Static p:Resources.MaximumChargingCurrentPhase1}, Minimum=0, Maximum=16}}" />
                        <TextBlock Margin="4,0,0,0" Text="A" />
                    </StackPanel>
                    <Slider IsEnabled="{Binding EnableDanger}" Value="{Binding WattPilot.MaximumChargingCurrentPhase1, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="6" Maximum="16" />

                </StackPanel>
            </GroupBox>

            <Grid Margin="0,0,8,0" Grid.IsSharedSizeScope="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <GroupBox Margin="0,8,0,0" Grid.Row="0" Header="{x:Static p:Resources.EcoSettings}" x:Name="EcoSettings">
                    <StackPanel Margin="8">

                        <CheckBox IsChecked="{Binding WattPilot.PvSurplusEnabled}" Content="{x:Static p:Resources.PvSurplusEnabled}" />
                        <CheckBox IsChecked="{Binding WattPilot.AwattarEnabled}" Content="{x:Static p:Resources.AwattarEnabled}" />
                        <CheckBox IsChecked="{Binding WattPilot.NoFeedIn}" Content="{x:Static p:Resources.NoFeedIn}" ToolTip="{x:Static p:Resources.NoFeedIn_ToolTip}"
                                  Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />
                        <CheckBox IsChecked="{Binding WattPilot.AllowChargingFromBattery}" Content="{x:Static p:Resources.AllowChargingFromBattery}"
                                  Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />
                        <StackPanel Orientation="Horizontal" Visibility="{Binding WattPilot.CanModifyChargingFromBatteryOptions, Converter={co:Bool2Visibility}}" IsEnabled="{Binding WattPilot.AllowChargingFromBattery}">
                            <CheckBox Margin="0,10,0,0" Content="{x:Static p:Resources.FromBatteryOnlyFrom}" IsChecked="{Binding WattPilot.RestrictChargingFromBattery}" />
                            <TextBox Text="{co:ValidationBinding WattPilot.AllowChargingFromBatteryStartString, Rule={v:ChargingRuleDate}}" Width="45" />
                            <TextBlock Text="{x:Static p:Resources.To}" Margin="5,0,0,0" />
                            <TextBox Text="{co:ValidationBinding WattPilot.AllowChargingFromBatteryStopString, Rule={v:ChargingRuleDate}}" Width="45" />
                        </StackPanel>

                        <Grid Margin="0,8,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G1" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G2" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G3" />
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static p:Resources.AwattarCountry}" Visibility="{Binding WattPilot.AwattarEnabled, Converter={co:Bool2Visibility}}" />
                            <TextBlock Grid.Column="1" Grid.Row="0" Text=":" Visibility="{Binding WattPilot.AwattarEnabled, Converter={co:Bool2Visibility}}" />

                            <ComboBox Grid.Column="2" Grid.Row="0" MinWidth="250" ItemsSource="{Binding EnergyPriceCountries}" SelectedItem="{Binding WattPilot.EnergyPriceCountry}"
                                      Visibility="{Binding WattPilot.AwattarEnabled, Converter={co:Bool2Visibility}}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>

                            <TextBlock Grid.Column="0" Grid.Row="1" Text="{x:Static p:Resources.EcoRoundingMode}" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />
                            <TextBlock Grid.Column="1" Grid.Row="1" Text=":" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />

                            <ComboBox Grid.Column="2" Grid.Row="1" MinWidth="250" ItemsSource="{Binding EcoRoundingModes}" SelectedItem="{Binding WattPilot.RoundingMode}"
                                      Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>

                        </Grid>

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AwattarEnabled, Converter={co:Bool2Visibility}}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.MaxEnergyPrice}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.MaxEnergyPrice, StringFormat=N1, Rule={v:MinMaxFloatRule Minimum=-200, Maximum=1000, PropertyDisplayName={x:Static p:Resources.MaxEnergyPrice}}}" />
                            <TextBlock Margin="4,0,0,0" Text="ct/kWh" />
                        </StackPanel>
                        <Slider Value="{Binding WattPilot.MaxEnergyPrice, Mode=TwoWay}" HorizontalAlignment="Stretch" TickFrequency=".1" IsSnapToTickEnabled="True" Minimum="-10" Maximum="100"
                                Visibility="{Binding WattPilot.AwattarEnabled, Converter={co:Bool2Visibility}}" />

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.PvSurplusBatteryLevel}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding WattPilot.PvSurplusBatteryLevelStartCharge, Rule={v:MinMaxIntRule Minimum=0, Maximum=100, PropertyDisplayName={x:Static p:Resources.PvSurplusBatteryLevel}}}" />
                            <TextBlock Margin="4,0,0,0" Text="%" />
                        </StackPanel>
                        <Slider Value="{Binding WattPilot.PvSurplusBatteryLevelStartCharge, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="0" Maximum="100"
                                Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.CanModifyChargingFromBatteryOptions, Converter={co:Bool2Visibility}}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.PvSurplusBatteryLevelStopCharge}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding WattPilot.PvSurplusBatteryLevelStopCharge, Rule={v:MinMaxIntRule Minimum=0, Maximum=100, PropertyDisplayName={x:Static p:Resources.PvSurplusBatteryLevel}}}" />
                            <TextBlock Margin="4,0,0,0" Text="%" />
                        </StackPanel>
                        <Slider Value="{Binding WattPilot.PvSurplusBatteryLevelStopCharge, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="0" Maximum="100"
                                Visibility="{Binding WattPilot.CanModifyChargingFromBatteryOptions, Converter={co:Bool2Visibility}}" />

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.OhmPilotTemperatureLimit}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.OhmPilotTemperatureLimitCelsius, Rule={v:MinMaxIntRule Minimum=0, Maximum=100, PropertyDisplayName={x:Static p:Resources.OhmPilotTemperatureLimit}}}" />
                            <TextBlock Margin="4,0,0,0" Text="°C" />
                        </StackPanel>
                        <Slider Value="{Binding WattPilot.OhmPilotTemperatureLimitCelsius, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="0" Maximum="100"
                                Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />

                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.PvSurplusPowerThreshold}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.PvSurplusPowerThreshold, Rule={v:MinMaxIntRule Minimum=0, Maximum=22000, PropertyDisplayName={x:Static p:Resources.PvSurplusPowerThreshold}}}" />
                            <TextBlock Margin="4,0,0,0" Text="W" />
                        </StackPanel>
                        <Slider Value="{Binding WattPilot.PvSurplusPowerThreshold, Mode=TwoWay}" TickFrequency="1" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="{Binding WattPilot.MaximumWattPilotPower}"
                                Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />

                        <StackPanel Margin="0,24,0,0" x:Name="NextTripSettings">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static p:Resources.NextTripTime}" />
                                <TextBlock Grid.Column="1" Grid.Row="0" Text=":" />
                                <TextBox Grid.Column="2" Grid.Row="0" MinWidth="250" MaxLength="32" Text="{co:ValidationBinding NextTripTimeString, Rule={v:ChargingRuleDate}}" />
                            </Grid>

                            <CheckBox IsChecked="{Binding WattPilot.NextTripRemainInEcoMode}" Content="{x:Static p:Resources.NextTripRemainInEcoMode}" />

                            <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}">
                                <TextBlock Margin="0,0,4,0">
                                    <Run Text="{x:Static p:Resources.NextTripEnergyToCharge}" /><Run Text=":" />
                                </TextBlock>
                                <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                         Text="{co:ValidationBinding Path=NextTripEnergyToCharge,ConverterCulture={x:Static gl:CultureInfo.CurrentCulture}, Rule={v:MinMaxFloatRule Minimum=0, Maximum=300, PropertyDisplayName={x:Static p:Resources.NextTripEnergyToCharge}}}" />
                                <TextBlock Margin="4,0,0,0" Text="kWh" />
                            </StackPanel>
                            <Slider Value="{Binding NextTripEnergyToCharge, Mode=TwoWay}" TickFrequency="1" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="150"
                                    Visibility="{Binding WattPilot.PvSurplusEnabled, Converter={co:Bool2Visibility}}" />
                        </StackPanel>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Header="{x:Static p:Resources.LoadBalancing}" Visibility="{Binding WattPilot.LoadBalancingEnabled, Converter={co:Bool2Visibility}}" Margin="0,8,0,0">
                    <StackPanel Margin="8">
                        <Grid Margin="0,8,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G1" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G2" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="G3" />
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static p:Resources.Priority}" />
                            <TextBlock Grid.Column="1" Grid.Row="0" Text=":" />

                            <ComboBox Grid.Column="2" Grid.Row="0" MinWidth="250" ItemsSource="{Binding LoadBalancingPriorities}" SelectedItem="{Binding WattPilot.LoadBalancingPriority}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>

                            <TextBlock IsEnabled="{Binding EnableDanger}" Grid.Column="0" Grid.Row="1" Text="{x:Static p:Resources.PhaseMap}" />
                            <TextBlock IsEnabled="{Binding EnableDanger}" Grid.Column="1" Grid.Row="1" Text=":" />
                            <ComboBox IsEnabled="{Binding EnableDanger}" Grid.Column="2" Grid.Row="1" MinWidth="250" ItemsSource="{x:Static m:WattPilotPhaseMap.All}" SelectedItem="{Binding WattPilot.PhaseMap}" />
                        </Grid>

                        <StackPanel IsEnabled="{Binding EnableDanger}" Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.LoadBalancingSharedMaxCurrent}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.LoadBalancingCurrents.DynamicMaximumCurrent, FallbackValue=6, StringFormat=N0, Rule={v:MinMaxIntRule Minimum=6, Maximum=96, PropertyDisplayName={x:Static p:Resources.LoadBalancingSharedMaxCurrent}}}" />
                            <TextBlock Margin="4,0,0,0" Text="A" />
                        </StackPanel>
                        <Slider IsEnabled="{Binding EnableDanger}" Value="{Binding WattPilot.LoadBalancingCurrents.DynamicMaximumCurrent, FallbackValue=6, Mode=TwoWay}" HorizontalAlignment="Stretch" TickFrequency="1" IsSnapToTickEnabled="True" Minimum="6" Maximum="96" />

                        <StackPanel IsEnabled="{Binding EnableDanger}" Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.MaximumCurrentDnoLine}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.LoadBalancingCurrents.MaximumCurrentDnoLine, FallbackValue=6, StringFormat=N0, Rule={v:MinMaxIntRule Minimum=6, Maximum=100, PropertyDisplayName={x:Static p:Resources.MaximumCurrentDnoLine}}}" />
                            <TextBlock Margin="4,0,0,0" Text="A" />
                        </StackPanel>
                        <Slider IsEnabled="{Binding EnableDanger}" Value="{Binding WattPilot.LoadBalancingCurrents.MaximumCurrentDnoLine, FallbackValue=6, Mode=TwoWay}" HorizontalAlignment="Stretch" TickFrequency="1" IsSnapToTickEnabled="True" Minimum="6" Maximum="100" />

                        <StackPanel IsEnabled="{Binding EnableDanger}" Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{x:Static p:Resources.MaximumFallbackCurrent}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPilot.LoadBalancingFallbackCurrent, FallbackValue=6, StringFormat=N0, Rule={v:WattPilotFallbackCurrentRule PropertyDisplayName={x:Static p:Resources.MaximumFallbackCurrent}}}" />
                            <TextBlock Margin="4,0,0,0" Text="A" />
                        </StackPanel>
                        <Slider IsEnabled="{Binding EnableDanger}" Value="{Binding WattPilot.LoadBalancingFallbackCurrent, FallbackValue=6, Mode=TwoWay}" HorizontalAlignment="Stretch" Ticks="0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32" IsSnapToTickEnabled="True" Minimum="0" Maximum="32" />

                    </StackPanel>
                </GroupBox>

            </Grid>

            <GroupBox Margin="0,8,8,0" Header="{x:Static p:Resources.CarSettings}">
                <StackPanel Margin="8" Grid.IsSharedSizeScope="True">

                    <CheckBox IsChecked="{Binding RequiresChargingInterval}" Content="{x:Static p:Resources.RequiresChargingInterval}" />
                    <CheckBox IsChecked="{Binding WattPilot.AllowChargingPause}" Content="{x:Static p:Resources.AllowChargingPause}" />
                    <CheckBox IsChecked="{Binding WattPilot.SimulateUnplugging}" Content="{x:Static p:Resources.SimulateUnplugging}"
                              Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}" />

                    <Grid Margin="0,8,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G1" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G2" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="G3" />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static p:Resources.PhaseSwitchMode}" Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}" />
                        <TextBlock Grid.Column="1" Grid.Row="0" Text=":" Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}" />
                        <ComboBox Grid.Column="2" Grid.Row="0" MinWidth="250" ItemsSource="{Binding PhaseSwitchModes}" SelectedItem="{Binding WattPilot.PhaseSwitchMode}"
                                  Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding Converter={co:Enum2DisplayName}}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                    </Grid>

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" ToolTip="{x:Static p:Resources.MinimumChargingCurrent_ToolTip}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MinimumChargingCurrent}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MinimumChargingCurrent, Rule={v:MinMaxIntRule Minimum=6, Maximum=32, PropertyDisplayName={x:Static p:Resources.MinimumChargingCurrent}}}" />
                        <TextBlock Margin="4,0,0,0" Text="A" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MinimumChargingCurrent, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="6" Maximum="{Binding WattPilot.AbsoluteMaximumChargingCurrent}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding RequiresChargingInterval, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MinimumChargingInterval}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MinimumChargingInterval, Converter={co:Milliseconds2Minutes}, Rule={v:MinMaxIntRule Minimum=5, Maximum=35791, PropertyDisplayName={x:Static p:Resources.MinimumChargingInterval}}}" />
                        <TextBlock Margin="4,0,0,0" Text="{x:Static p:Resources.Minutes}" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MinimumChargingInterval, Mode=TwoWay}" TickFrequency="60000" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="300000" Maximum="14400000"
                            Visibility="{Binding RequiresChargingInterval, Converter={co:Bool2Visibility}}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MinimumPauseDuration}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MinimumPauseDuration, Converter={co:Milliseconds2Minutes}, Rule={v:MinMaxIntRule Minimum=0, Maximum=35791, PropertyDisplayName={x:Static p:Resources.MinimumPauseDuration}}}" />
                        <TextBlock Margin="4,0,0,0" Text="{x:Static p:Resources.Minutes}" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MinimumPauseDuration, Mode=TwoWay}" TickFrequency="60000" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="1200000"
                            Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MinimumChargingTime}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MinimumChargingTime, Converter={co:Milliseconds2Minutes}, Rule={v:MinMaxIntRule Minimum=0, Maximum=35791, PropertyDisplayName={x:Static p:Resources.MinimumChargingTime}}}" />
                        <TextBlock Margin="4,0,0,0" Text="{x:Static p:Resources.Minutes}" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MinimumChargingTime, Mode=TwoWay}" TickFrequency="60000" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="1200000"
                            Visibility="{Binding WattPilot.AllowChargingPause, Converter={co:Bool2Visibility}}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.PhaseSwitchPower}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.PhaseSwitchPower, Rule={v:MinMaxIntRule Minimum=1400, Maximum=7200, PropertyDisplayName={x:Static p:Resources.PhaseSwitchPower}}}" />
                        <TextBlock Margin="4,0,0,0" Text="W" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.PhaseSwitchPower, Mode=TwoWay}" TickFrequency="1" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="1400" Maximum="7200"
                            Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.PhaseSwitchTriggerTime}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.PhaseSwitchTriggerTime, Converter={co:Milliseconds2Minutes}, Rule={v:MinMaxIntRule Minimum=0, Maximum=35791, PropertyDisplayName={x:Static p:Resources.PhaseSwitchTriggerTime}}}" />
                        <TextBlock Margin="4,0,0,0" Text="{x:Static p:Resources.Minutes}" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.PhaseSwitchTriggerTime, Mode=TwoWay}" TickFrequency="60000" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="1200000"
                            Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}" />

                    <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center" Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{x:Static p:Resources.MinimumTimeBetweenPhaseSwitches}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=WattPilot.MinimumTimeBetweenPhaseSwitches, Converter={co:Milliseconds2Minutes}, Rule={v:MinMaxIntRule Minimum=0, Maximum=35791, PropertyDisplayName={x:Static p:Resources.MinimumTimeBetweenPhaseSwitches}}}" />
                        <TextBlock Margin="4,0,0,0" Text="{x:Static p:Resources.Minutes}" />
                    </StackPanel>
                    <Slider Value="{Binding WattPilot.MinimumTimeBetweenPhaseSwitches, Mode=TwoWay}" TickFrequency="60000" IsSnapToTickEnabled="True" HorizontalAlignment="Stretch" Minimum="0" Maximum="1200000"
                            Visibility="{Binding WattPilot.AllowPauseAndHasPhaseSwitch, Converter={co:Bool2Visibility}}" />

                </StackPanel>
            </GroupBox>

            <GroupBox Margin="0,8,8,0" Header="{x:Static p:Resources.ScannedWifis}" SnapsToDevicePixels="True">
                <StackPanel Margin="8" Grid.IsSharedSizeScope="True">
                    <DataGrid BorderThickness="1" BorderBrush="Black" IsReadOnly="True" GridLinesVisibility="None" AlternatingRowBackground="AntiqueWhite" ItemsSource="{Binding WattPilot.ScannedWifis}" AutoGenerateColumns="False">
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">
                                <Setter Property="ToolTip">
                                    <Setter.Value>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Grid.Resources>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="FontSize" Value="12" />
                                                </Style>
                                                <Style TargetType="Viewbox">
                                                    <Setter Property="HorizontalAlignment" Value="Right" />
                                                </Style>
                                            </Grid.Resources>

                                            <Viewbox Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" HorizontalAlignment="Center" Margin="0,0,0,1">
                                                <TextBlock FontSize="14" Text="{Binding Ssid, FallbackValue='---'}" HorizontalAlignment="Center" />
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static p:Resources.Mode}" />
                                            <Viewbox Grid.Column="1" Grid.Row="2">
                                                <TextBlock HorizontalAlignment="Right">
                                                    <Run Text="{Binding Type, Mode=OneWay, FallbackValue='---'}" />
                                                </TextBlock>
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="3" Text="{x:Static p:Resources.Channel}" />
                                            <Viewbox Grid.Column="1" Grid.Row="3">
                                                <TextBlock Text="{Binding Channel, FallbackValue='---'}" HorizontalAlignment="Right" />
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static p:Resources.Signal}" />
                                            <Viewbox Grid.Column="1" Grid.Row="4">
                                                <TextBlock HorizontalAlignment="Right">
                                                    <Run Text="{Binding WifiSignal, FallbackValue='---'}" />
                                                    <Run Text="dBm" />
                                                </TextBlock>
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="5" Text="Auth" />
                                            <Viewbox Grid.Column="1" Grid.Row="5">
                                                <TextBlock Text="{Binding Encryption, FallbackValue='---', Converter={co:ToUpper}}" HorizontalAlignment="Right" />
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="6" Text="{x:Static p:Resources.CipherP}" />
                                            <Viewbox Grid.Column="1" Grid.Row="6">
                                                <TextBlock Text="{Binding PairwiseCipher, FallbackValue='---', Converter={co:ToUpper}}" HorizontalAlignment="Right" />
                                            </Viewbox>

                                            <TextBlock Grid.Column="0" Grid.Row="7" Text="{x:Static p:Resources.CipherG}" />
                                            <Viewbox Grid.Column="1" Grid.Row="7">
                                                <TextBlock Text="{Binding GroupCipher, FallbackValue='---', Converter={co:ToUpper}}" HorizontalAlignment="Right" />
                                            </Viewbox>
                                        </Grid>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.RowStyle>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="{x:Static p:Resources.Signal}" SortMemberPath="WifiSignal" CanUserSort="True" CanUserResize="False">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <c:WifiControl HorizontalAlignment="Center" Width="14" SnapsToDevicePixels="False" Margin="2,2,0,0" Fill="Black" SignalStrength="{Binding WifiSignal}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding Ssid}" Header="{x:Static p:Resources.WifiSsid}" CanUserResize="False" />
                            <DataGridTextColumn Binding="{Binding Encryption, Converter={co:ToUpper}}" Header="Encryption" CanUserResize="False" />
                        </DataGrid.Columns>
                    </DataGrid>
                </StackPanel>
            </GroupBox>


            <GroupBox Width="250" Style="{StaticResource ErrorGroupBox}" Margin="0,8,8,0" />

        </StackPanel>

        <Grid Grid.Row="1" Grid.Column="0" VerticalAlignment="Bottom" Margin="8,16">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="{x:Static p:Resources.Danger}" Margin="0,0,4,0" VerticalAlignment="Center">
                <Run Text=":" />
            </TextBlock>
            <ToggleButton Grid.Column="1" Height="18" VerticalAlignment="Center" IsChecked="{Binding EnableDanger}" />
            <Viewbox Grid.Column="3" Height="32" Margin="0,4,-180,0" Visibility="{Binding IsInUpdate, Converter={co:Bool2Visibility False=Hidden}}">
                <Control Style="{StaticResource BusyAnimationStyle}" Background="Transparent" />
            </Viewbox>
            <c:Toast Height="40" Background="Green" CornerRadius="10" Grid.Column="3" Padding="10,6" Foreground="White" MinWidth="200" Margin="0,0,16,0" Text="{Binding ToastText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Button Grid.Column="4" VerticalAlignment="Center" Content="{x:Static p:Resources.Undo}" Command="{Binding UndoCommand}" IsEnabled="{Binding IsInUpdate, Converter={co:BoolInverter}}" />
            <Button Grid.Column="5" VerticalAlignment="Center" Content="{x:Static p:Resources.Apply}" Command="{Binding ApplyCommand}">
                <Button.IsEnabled>
                    <MultiBinding Converter="{co:MultiBool2Bool None=True, Any=False, All=False, Invalid=False}">
                        <Binding Path="IsInUpdate" />
                        <Binding Path="HasVisibleNotifiedValidationErrors" />
                    </MultiBinding>
                </Button.IsEnabled>
            </Button>

        </Grid>
    </Grid>
</c:ValidationWindow>