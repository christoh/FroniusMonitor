<!-- ReSharper disable MarkupAttributeTypo -->
<c:ValidationWindow x:Class="De.Hochstaetter.FroniusMonitor.Views.SelfConsumptionOptimizationView"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:p="clr-namespace:De.Hochstaetter.Fronius.Localization;assembly=Fronius"
                    xmlns:vm="clr-namespace:De.Hochstaetter.FroniusMonitor.ViewModels"
                    xmlns:co="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Converters"
                    xmlns:v="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Validation"
                    xmlns:l="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Localization"
                    xmlns:m="clr-namespace:De.Hochstaetter.Fronius.Models.Gen24.Settings;assembly=Fronius"
                    xmlns:c="clr-namespace:De.Hochstaetter.FroniusMonitor.Controls"
                    mc:Ignorable="d"
                    Title="{Binding Title}" SizeToContent="WidthAndHeight" ResizeMode="CanMinimize"
                    d:DataContext="{d:DesignInstance Type=vm:SelfConsumptionOptimizationViewModel}">
    <Grid>
        <Grid.Resources>
            <Style TargetType="Button">
                <Setter Property="Margin" Value="0,0,8,0" />
                <Setter Property="MinHeight" Value="30" />
                <Setter Property="MinWidth" Value="70" />
                <Setter Property="Padding" Value="8,0" />
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Opacity" Value="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={co:Bool2Double True=1, False=.5}}" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
                <EventSetter Event="Validation.Error" Handler="OnValidationChanged" />
            </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GroupBox Header="{x:Static p:Resources.GridPowerManagement}" Grid.Row="0" Margin="8,8,8,4">
                <Grid Margin="8,16,8,8">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,4" HorizontalAlignment="Left">
                        <RadioButton IsChecked="{Binding Settings.Mode, Mode=TwoWay, Converter={co:OptimizationMode2Bool Automatic=True, Manual=False}}"
                                     Margin="8,0" Content="{l:Config 'BATTERIES.AUTO'}" />
                        <RadioButton IsChecked="{Binding Settings.Mode, Mode=TwoWay, Converter={co:OptimizationMode2Bool Automatic=False, Manual=True}}"
                                     Margin="8,0" Content="{l:Config 'BATTERIES.MANUAL'}" />
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left"
                                    Visibility="{Binding Settings.Mode, Converter={co:OptimizationMode2Visibility}, FallbackValue=Collapsed}">
                            <RadioButton Content="{l:Ui 'BATTERIES.FEED_IN'}" IsChecked="{Binding IsFeedIn, Mode=TwoWay}" Margin="8,0" />
                            <RadioButton Content="{l:Ui 'BATTERIES.CONSUMPTION'}" IsChecked="{Binding IsFeedIn, Mode=TwoWay, Converter={co:BoolInverter}}" Margin="8,0" />
                        </StackPanel>
                    </StackPanel>
                    <Grid Grid.Row="1" Margin="0,8,0,4"
                          Visibility="{Binding Settings.Mode, Converter={co:OptimizationMode2Visibility}, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,8,0,-2" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Config 'BATTERIES.HYB_EM_POWER'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=RequestedGridPower, Rule={v:MinMaxIntRule Minimum=0, Maximum=50000, PropertyDisplayName={l:Config 'BATTERIES.HYB_EM_POWER'}}}" />
                            <TextBlock Text="W" Margin="4,0,0,0" />
                        </StackPanel>
                        <Slider Grid.Row="3" Value="{Binding LogGridPower, Mode=TwoWay}"
                                HorizontalAlignment="Stretch"
                                Minimum="-.305" Maximum="4.6989700043360188047862611052755" />
                    </Grid>
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="1" Header="{l:Config 'BATTERIES.BAT_M0_SOC_MODE'}" Margin="8,4">
                <Grid Margin="8,16,8,12">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,4">
                        <RadioButton IsChecked="{Binding Settings.Limits, Mode=TwoWay, Converter={co:SocLimits2Bool UseDefault=True, Override=False}}"
                                     Margin="8,0" Content="{l:Config 'BATTERIES.SOC_MODE_AUTO'}" />
                        <RadioButton IsChecked="{Binding Settings.Limits, Mode=TwoWay, Converter={co:SocLimits2Bool UseDefault=False, Override=True}}"
                                     Margin="8,0" Content="{l:Config 'BATTERIES.SOC_MODE_MANUAL'}" />
                    </StackPanel>
                    <Grid Grid.Row="1"
                          Visibility="{Binding Settings.Limits, Converter={co:SocLimits2Visibility}, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,-2" HorizontalAlignment="Center" Grid.Row="0">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Config 'BATTERIES.BAT_M0_SOC_MIN'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=SocMin, Rule={v:MinMaxIntRule Minimum=0, Maximum=100, PropertyDisplayName={l:Config 'BATTERIES.BAT_M0_SOC_MIN'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="%" />
                        </StackPanel>
                        <Slider Value="{Binding SocMin, Mode=TwoWay}" Grid.Row="1" HorizontalAlignment="Stretch"
                                Minimum="{Binding Storage.MinimumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=0}"
                                Maximum="{Binding Storage.MaximumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=100}" />
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,-2" HorizontalAlignment="Center" Grid.Row="2">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Config 'BATTERIES.BAT_M0_SOC_MAX'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=SocMax, Rule={v:MinMaxIntRule Minimum=0, Maximum=100, PropertyDisplayName={l:Config 'BATTERIES.BAT_M0_SOC_MAX'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="%" />
                        </StackPanel>
                        <Slider Value="{Binding SocMax, Mode=TwoWay}" Grid.Row="3" HorizontalAlignment="Stretch"
                                Minimum="{Binding Storage.MinimumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=0}"
                                Maximum="{Binding Storage.MaximumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=100}" />
                    </Grid>
                </Grid>
            </GroupBox>
        </Grid>

        <Grid Grid.Row="0" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <GroupBox Grid.Row="0" Header="{x:Static p:Resources.BatteryChargingOptions}" Margin="0,4,8,4">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel Margin="16,16,8,8" Grid.Row="0">
                        <StackPanel.Resources>
                            <Style TargetType="CheckBox">
                                <Setter Property="Margin" Value="0,0,8,0" />
                            </Style>
                        </StackPanel.Resources>
                        <CheckBox Content="{l:Config 'BATTERIES.HYB_EVU_CHARGEFROMGRID'}"
                                  IsChecked="{Binding Settings.ChargeFromGrid}" />
                        <CheckBox Content="{l:Config 'BATTERIES.HYB_BM_CHARGEFROMAC'}"
                                  IsChecked="{Binding Settings.ChargeFromAc}" />
                        <CheckBox IsEnabled="{Binding EnableDanger}"
                                  IsChecked="{Binding Settings.IsEnabled}">
                            <CheckBox.Content>
                                <TextBlock Text="{x:Static p:Resources.EnableBattery}" />
                            </CheckBox.Content>
                        </CheckBox>
                        <CheckBox IsEnabled="{Binding EnableDanger}"
                                  IsChecked="{Binding Settings.IsInCalibration}">
                            <CheckBox.Content>
                                <TextBlock Text="{x:Static p:Resources.CalibrateBattery}" />
                            </CheckBox.Content>
                        </CheckBox>
                        <CheckBox IsEnabled="{Binding EnableDanger}"
                                  IsChecked="{Binding Settings.IsInServiceMode}">
                            <CheckBox.Content>
                                <TextBlock Text="{x:Static p:Resources.IsInServiceMode}" />
                            </CheckBox.Content>
                        </CheckBox>
                        <CheckBox IsEnabled="{Binding EnableDanger}"
                                  IsChecked="{Binding Settings.IsAcCoupled}">
                            <CheckBox.Content>
                                <TextBlock Text="{x:Static p:Resources.BatteryIsAcCoupled}" />
                            </CheckBox.Content>
                        </CheckBox>
                    </StackPanel>
                    <Grid Margin="0,0,0,8" Grid.Row="1" Visibility="{Binding Settings.ChargeFromAc, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,-2" HorizontalAlignment="Center" Grid.Row="0">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Config 'BATTERIES.HYB_BM_PACMIN'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox TextAlignment="Center" Width="40" Text="{co:ValidationBinding Path= BatteryAcChargingMaxPower, Converter={co:ToAbsolute}, Rule={v:MinMaxIntRule}}" />
                            <TextBlock Margin="4,0,0,0" Text="W" />
                        </StackPanel>
                        <Slider Grid.Row="1" Value="{Binding LogHomePower, Mode=TwoWay}"
                                HorizontalAlignment="Stretch"
                                Minimum="-.305" Maximum="4.6989700043360188047862611052755" />
                    </Grid>
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="1" Header="{x:Static p:Resources.BackupConfiguration}" Margin="0,4,8,4">
                <Grid Margin="8,16,8,12">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Margin="0,-4,0,-2" HorizontalAlignment="Center" Grid.Row="0">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{l:Config 'BATTERIES.HYB_BACKUP_CRITICALSOC'}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=Settings.BackupCriticalSoc, Rule={v:RegExRule Pattern='^100$|^0*([0-9]{1,2})$', Message={x:Static p:Resources.MustBePercent}}}" />
                        <TextBlock Margin="4,0,0,0" Text="%" />
                    </StackPanel>
                    <Slider Value="{Binding Settings.BackupCriticalSoc, Mode=TwoWay}" Grid.Row="1" HorizontalAlignment="Stretch" 
                            Minimum="{Binding Storage.MinimumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=0}"
                            Maximum="{Binding Storage.MaximumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=100}" />
                    <StackPanel Orientation="Horizontal" Margin="0,8,0,-2" HorizontalAlignment="Center" Grid.Row="2">
                        <TextBlock Margin="0,0,4,0">
                            <Run Text="{l:Config 'BATTERIES.HYB_BACKUP_RESERVED'}" /><Run Text=":" />
                        </TextBlock>
                        <TextBox TextAlignment="Center" Width="40"
                                 Text="{co:ValidationBinding Path=Settings.BackupReserve, Rule={v:RegExRule Pattern='^100$|^0*([0-9]{1,2})$', Message={x:Static p:Resources.MustBePercent}}}" />
                        <TextBlock Margin="4,0,0,0" Text="%" />
                    </StackPanel>
                    <Slider Value="{Binding Settings.BackupReserve, Mode=TwoWay}" Grid.Row="3" HorizontalAlignment="Stretch"
                            Minimum="{Binding Storage.MinimumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=0}" 
                            Maximum="{Binding Storage.MaximumStateOfCharge, Converter={co:Multiply Factor=100}, FallbackValue=100}" />
                    <CheckBox Grid.Row="4" IsChecked="{Binding Settings.EnableSystemDeadlockPrevention}" Margin="0,16,0,0">
                        <CheckBox.Content>
                            <TextBlock Text="{l:Config 'BATTERIES.HYB_BACKUP_SYSTEMDEADLOCKPREVENTION'}" />
                        </CheckBox.Content>
                        </CheckBox>
                </Grid>
            </GroupBox>

        </Grid>

        <GroupBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="8,4" Header="{l:Ui 'BATTERY_CONTROL_SCHEDULE.ADD_CONTAINER_TITLE'}">
            <Grid Margin="8">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <DataGrid Grid.Row="0"
                          ColumnWidth="Auto" CanUserAddRows="False" RowHeaderWidth="20"
                          SelectionUnit="FullRow" SelectionMode="Single"
                          ItemsSource="{Binding ChargingRules}" AutoGenerateColumns="False"
                          GridLinesVisibility="Vertical"
                          AlternatingRowBackground="AntiqueWhite"
                          BorderThickness="1">
                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow">
                            <Setter Property="ToolTip" Value="{x:Static p:Resources.RuleTooltip}" />
                            <Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" />
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu Placement="Center">
                                        <MenuItem Header="{x:Static p:Resources.AddRule}"
                                                  Command="{Binding Path=PlacementTarget.(FrameworkElement.Tag).(vm:SelfConsumptionOptimizationViewModel.AddChargingRuleCommand), RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                        <MenuItem Header="{x:Static p:Resources.DeleteRule}"
                                                  Command="{Binding Path=PlacementTarget.(FrameworkElement.Tag).(vm:SelfConsumptionOptimizationViewModel.DeleteChargingRuleCommand), RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}"
                                                  CommandParameter="{Binding Path=PlacementTarget.(FrameworkElement.DataContext),RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGrid.RowStyle>
                    <DataGrid.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightSkyBlue" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightSkyBlue" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />

                        <Style TargetType="DataGridColumnHeader" x:Key="Es">
                            <Setter Property="Padding" Value="10,8" />
                        </Style>

                        <Style TargetType="DataGridCell">
                            <Setter Property="MinHeight" Value="32" />
                            <Setter Property="VerticalContentAlignment" Value="Bottom" />
                            <Setter Property="VerticalAlignment" Value="Bottom" />
                        </Style>

                        <Style TargetType="ComboBox">
                            <Setter Property="Margin" Value="8,0,8,0" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="ItemTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="m:ChargingRuleType">
                                        <TextBlock Height="24" Padding="0,2,0,0" Text="{Binding Converter={co:ChargingRuleToDisplayName}}" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
                            <Setter Property="Margin" Value="8,2,8,0" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>

                        <Style TargetType="TextBox" x:Key="TextBoxStyle">
                            <Setter Property="Margin" Value="0,0" />
                            <Setter Property="Background" Value="White" />
                            <Setter Property="Padding" Value="6,7,0,0" />
                            <Setter Property="MaxWidth" Value="80" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <EventSetter Event="Validation.Error" Handler="OnValidationChanged" />
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                        </Style>

                        <Style TargetType="TextBlock" x:Key="TextBlockStyle">
                            <Setter Property="Margin" Value="8,0" />
                            <Setter Property="MaxWidth" Value="80" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                        </Style>

                    </DataGrid.Resources>

                    <DataGrid.Columns>

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Active}" Binding="{Binding IsActive, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="True" CanUserSort="True" SortMemberPath="IsActive"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridTextColumn Header="{l:Ui 'BATTERY_CONTROL_SCHEDULE.TIME_FROM', 'True'}" Binding="{co:ValidationBinding StartTime, Rule={v:ChargingRuleDate}}" SortMemberPath="StartTime"
                                            HeaderStyle="{StaticResource Es}" CanUserReorder="False" CanUserResize="True" CanUserSort="True" SortDirection="Ascending"
                                            ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                        <DataGridTextColumn Header="{l:Ui 'BATTERY_CONTROL_SCHEDULE.TIME_UNTIL', 'True'}" Binding="{co:ValidationBinding EndTime, Rule={v:ChargingRuleDate}}" SortMemberPath="EndTime"
                                            HeaderStyle="{StaticResource Es}" CanUserReorder="False" CanUserResize="True" CanUserSort="True"
                                            ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                        <DataGridTemplateColumn Header="{l:Ui 'BATTERY_CONTROL_SCHEDULE.REGULATION', 'True'}" HeaderStyle="{StaticResource Es}" CanUserReorder="False" CanUserResize="True" CanUserSort="True" SortMemberPath="RuleType">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="{x:Type m:Gen24ChargingRule}">
                                    <ComboBox SelectedItem="{Binding RuleType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Path=DataContext.(vm:SelfConsumptionOptimizationViewModel.RuleTypes), RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTextColumn Header="{l:Ui 'BATTERY_CONTROL_SCHEDULE.POWER', 'True'}" SortMemberPath="Power" Binding="{co:ValidationBinding Power, Rule={v:MinMaxIntRule PropertyDisplayName={l:Ui 'BATTERY_CONTROL_SCHEDULE.POWER'}, Minimum=0, Maximum=50000}}"
                                            HeaderStyle="{StaticResource Es}" CanUserReorder="False" CanUserResize="True" CanUserSort="True"
                                            ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Monday_One}" SortMemberPath="Monday" Binding="{Binding Monday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Tuesday_One}" SortMemberPath="Tuesday" Binding="{Binding Tuesday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Wednesday_One}" SortMemberPath="Wednesday" Binding="{Binding Wednesday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Thursday_One}" SortMemberPath="Thursday" Binding="{Binding Thursday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Friday_One}" SortMemberPath="Friday" Binding="{Binding Friday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Saturday_One}" SortMemberPath="Saturday" Binding="{Binding Saturday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                        <DataGridCheckBoxColumn Header="{x:Static p:Resources.Sunday_One}" SortMemberPath="Sunday" Binding="{Binding Sunday, UpdateSourceTrigger=PropertyChanged}" CanUserReorder="False" CanUserResize="False" CanUserSort="True"
                                                HeaderStyle="{StaticResource Es}" ElementStyle="{StaticResource CheckBoxStyle}" />

                    </DataGrid.Columns>
                </DataGrid>

                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,8,0,0">
                    <Button Content="{x:Static p:Resources.AddRule}" Width="Auto" Command="{Binding AddChargingRuleCommand}" />
                </StackPanel>
            </Grid>
        </GroupBox>

        <GroupBox Style="{StaticResource ErrorGroupBox}" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Margin="0,4,6,4" />

        <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" VerticalAlignment="Bottom" Margin="8,16,0,16">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="{x:Static p:Resources.Danger}" Margin="0,0,4,0" VerticalAlignment="Center">
                <Run Text=":" />
            </TextBlock>
            <ToggleButton Grid.Column="1" Height="18" VerticalAlignment="Center" IsChecked="{Binding EnableDanger}" />
            <Viewbox Grid.Column="3" Height="32" Margin="0,4,-150,0" Visibility="{Binding IsInUpdate, Converter={co:Bool2Visibility False=Hidden}}">
                <Control Style="{StaticResource BusyAnimationStyle}" Background="Transparent" />
            </Viewbox>
            <c:Toast Height="32" Background="Green" CornerRadius="10" Grid.Column="3" Padding="10,6" Foreground="White" MinWidth="200" Margin="0,0,16,0" Text="{Binding ToastText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Button Grid.Column="4" VerticalAlignment="Center" Content="{x:Static p:Resources.Undo}" Command="{Binding UndoCommand}" IsEnabled="{Binding IsInUpdate, Converter={co:BoolInverter}}" />
            <Button Grid.Column="5" VerticalAlignment="Center" Content="{x:Static p:Resources.Apply}" Command="{Binding ApplyCommand}">
                <Button.IsEnabled>
                    <MultiBinding Converter="{co:MultiBool2Bool Any=False, All=False, Invalid=False, None=True}">
                        <Binding Path="IsInUpdate" />
                        <Binding Path="HasVisibleNotifiedValidationErrors" />
                    </MultiBinding>
                </Button.IsEnabled>
            </Button>
        </Grid>
    </Grid>
</c:ValidationWindow>