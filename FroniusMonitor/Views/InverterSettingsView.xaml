<c:ValidationWindow x:Class="De.Hochstaetter.FroniusMonitor.Views.InverterSettingsView"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:vm="clr-namespace:De.Hochstaetter.FroniusMonitor.ViewModels"
                    xmlns:co="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Converters"
                    xmlns:v="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Validation"
                    xmlns:l="clr-namespace:De.Hochstaetter.FroniusMonitor.Wpf.Localization"
                    xmlns:p="clr-namespace:De.Hochstaetter.Fronius.Localization;assembly=Fronius"
                    xmlns:c="clr-namespace:De.Hochstaetter.FroniusMonitor.Controls"
                    xmlns:settings="clr-namespace:De.Hochstaetter.Fronius.Models.Gen24.Settings;assembly=Fronius"
                    xmlns:gen24="clr-namespace:De.Hochstaetter.Fronius.Models.Gen24;assembly=Fronius"
                    mc:Ignorable="d"
                    ResizeMode="NoResize"
                    SizeToContent="WidthAndHeight"
                    d:DataContext="{d:DesignInstance vm:InverterSettingsViewModel}"
                    Title="{Binding Title}">
    <!-- ReSharper disable MarkupAttributeTypo -->
    <Grid Margin="8">
        <Grid.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Margin" Value="0,4,0,4" />
                <Setter Property="Opacity" Value="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={co:Bool2Double True=1, False=.5}}" />
            </Style>

            <Style TargetType="Button">
                <Setter Property="Margin" Value="0,0,8,0" />
                <Setter Property="MinHeight" Value="30" />
                <Setter Property="MinWidth" Value="70" />
                <Setter Property="Padding" Value="8,0" />
            </Style>

            <Style TargetType="GroupBox">
                <Setter Property="Padding" Value="8" />
            </Style>

            <Style TargetType="TextBox">
                <Setter Property="MinHeight" Value="26" />
                <Setter Property="Margin" Value="8,4,0,4" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
                <EventSetter Event="Validation.Error" Handler="OnValidationChanged" />
            </Style>

            <Style TargetType="CheckBox">
                <Setter Property="Margin" Value="0,8,0,0" />
            </Style>

            <Style TargetType="ComboBox" x:Key="StandardComboBox">
                <Setter Property="Margin" Value="8,5,0,3" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource StandardComboBox}" />

        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" IsEnabled="{Binding IsInUpdate, Converter={co:BoolInverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Row="0" Grid.Column="0" Header="{l:Ui 'COMMON.TITLE'}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="200" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="{l:Config 'COMMON.systemName'}" />
                    <TextBlock Grid.Row="0" Grid.Column="1" Text=":" />
                    <TextBox Grid.Row="0" Grid.Column="2" MaxLength="30" Text="{Binding Settings.SystemName}" />

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="Time zone" />
                    <TextBlock Grid.Row="1" Grid.Column="1" Text=":" />
                    <TextBox Grid.Row="1" Grid.Column="2" MaxLength="30" Text="{Binding Settings.TimeZoneName}" />

                    <CheckBox Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="2" IsChecked="{Binding Settings.TimeSync}" Content="{x:Static p:Resources.SynchronizeTime}" />
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="0" Grid.Column="1" Header="{l:Channel 'MPPT1'}" Margin="4,0,0,0"
                      IsEnabled="{Binding Gen24Service.Connection.UserName, FallbackValue=customer, Converter={co:String2Bool Value=customer, Equal=False, NotEqual=True}}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Grid.Column="0" Text="{l:Channel 'PV_MODE_MPP_01_U16'}" />
                    <TextBlock Grid.Row="0" Grid.Column="1" Text=":" />
                    <ComboBox MinWidth="140" Grid.Row="0" Grid.Column="2" ItemsSource="{Binding PowerModes}" SelectedItem="{Binding SelectedPowerModeMppt1}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{l:Channel 'PV_MODE_DYNAMICPEAK_01_U16'}" x:Name="DynamicPeakManager1"
                               Visibility="{Binding Settings.Mppt.Mppt1.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Auto, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed }"/>
                    <TextBlock Grid.Row="1" Grid.Column="1" Text=":" Visibility="{Binding ElementName=DynamicPeakManager1, Path=Visibility}"/>
                    <ComboBox MinWidth="140" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding DynamicPeakManagerModes}" SelectedItem="{Binding SelectedDynamicPeakManagerModeMppt1}"
                              Visibility="{Binding ElementName=DynamicPeakManager1, Path=Visibility}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <StackPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Channel 'PV_POWERACTIVE_CONNECTED_PEAK_MAX_01_U32'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPeakMppt1, FallbackValue=5000, StringFormat=F0, Rule={v:MinMaxIntRule Minimum=0, Maximum=2000000, PropertyDisplayName={l:Channel 'PV_POWERACTIVE_CONNECTED_PEAK_MAX_01_U32'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="W" />
                        </StackPanel>
                        <Slider Value="{Binding LogWattPeakMppt1, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="-0.30980391997148633857556748281473" Maximum="5.3010299956639811952137388947245" />
                    </StackPanel>

                    <StackPanel Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3">
                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center"
                                    Visibility="{Binding Settings.Mppt.Mppt1.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Fix, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Channel 'PV_VOLTAGE_FIX_01_F32'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=Settings.Mppt.Mppt1.DcFixedVoltage, FallbackValue=600, StringFormat=F0, Rule={v:MinMaxFloatRule Minimum=80, Maximum=800, PropertyDisplayName={l:Channel 'PV_VOLTAGE_FIX_01_F32'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="V" />
                        </StackPanel>
                        <Slider Value="{Binding Settings.Mppt.Mppt1.DcFixedVoltage, Mode=TwoWay, FallbackValue=600}" HorizontalAlignment="Stretch" TickFrequency=".1" IsSnapToTickEnabled="True" Minimum="80" Maximum="800"
                                Visibility="{Binding Settings.Mppt.Mppt1.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Fix, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed}" />
                    </StackPanel>
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="0" Grid.Column="2" Header="{l:Channel 'MPPT2'}" Margin="4,0,0,0"
                      IsEnabled="{Binding Gen24Service.Connection.UserName, FallbackValue=customer, Converter={co:String2Bool Value=customer, Equal=False, NotEqual=True}}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Grid.Column="0" Text="{l:Channel 'PV_MODE_MPP_02_U16'}" />
                    <TextBlock Grid.Row="0" Grid.Column="1" Text=":" />
                    <ComboBox MinWidth="140" Grid.Row="0" Grid.Column="2" ItemsSource="{Binding PowerModes}" SelectedItem="{Binding SelectedPowerModeMppt2}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{l:Channel 'PV_MODE_DYNAMICPEAK_02_U16'}" x:Name="DynamicPeakManager2"
                               Visibility="{Binding Settings.Mppt.Mppt2.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Auto, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed}"/>
                    <TextBlock Grid.Row="1" Grid.Column="1" Text=":" Visibility="{Binding ElementName=DynamicPeakManager2, Path=Visibility}" />
                    <ComboBox MinWidth="140" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding DynamicPeakManagerModes}" SelectedItem="{Binding SelectedDynamicPeakManagerModeMppt2}"
                              Visibility="{Binding ElementName=DynamicPeakManager2, Path=Visibility}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Margin="0,2,0,0" Height="20" Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <StackPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Channel 'PV_POWERACTIVE_CONNECTED_PEAK_MAX_02_U32'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" Width="40"
                                     Text="{co:ValidationBinding Path=WattPeakMppt2, FallbackValue=5000, StringFormat=F0, Rule={v:MinMaxIntRule Minimum=0, Maximum=2000000, PropertyDisplayName={l:Channel 'PV_POWERACTIVE_CONNECTED_PEAK_MAX_02_U32'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="W" />
                        </StackPanel>
                        <Slider Value="{Binding LogWattPeakMppt2, Mode=TwoWay}" HorizontalAlignment="Stretch" Minimum="-0.30980391997148633857556748281473" Maximum="5.3010299956639811952137388947245" />
                    </StackPanel>

                    <StackPanel Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3">
                        <StackPanel Orientation="Horizontal" Margin="0,16,0,0" HorizontalAlignment="Center"
                                    Visibility="{Binding Settings.Mppt.Mppt2.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Fix, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed}">
                            <TextBlock Margin="0,0,4,0">
                                <Run Text="{l:Channel 'PV_VOLTAGE_FIX_02_F32'}" /><Run Text=":" />
                            </TextBlock>
                            <TextBox MinHeight="0" TextAlignment="Center" MinWidth="40"
                                     Text="{co:ValidationBinding Path=Settings.Mppt.Mppt2.DcFixedVoltage, FallbackValue=600, StringFormat=F0, Rule={v:MinMaxFloatRule Minimum=80, Maximum=800, PropertyDisplayName={l:Channel 'PV_VOLTAGE_FIX_02_F32'}}}" />
                            <TextBlock Margin="4,0,0,0" Text="V" />
                        </StackPanel>
                        <Slider Value="{Binding Settings.Mppt.Mppt2.DcFixedVoltage, Mode=TwoWay, FallbackValue=600}" HorizontalAlignment="Stretch" TickFrequency=".1" IsSnapToTickEnabled="True" Minimum="80" Maximum="800"
                                Visibility="{Binding Settings.Mppt.Mppt2.PowerMode, Converter={co:MpptPowerMode2Visibility Value=Fix, Equal=Visible, NotEqual=Collapsed}, FallbackValue=Collapsed}" />
                    </StackPanel>
                </Grid>
            </GroupBox>

            <GroupBox Visibility="{Binding Gen24Service.Connection.UserName, FallbackValue=Collapsed, Converter={co:String2Visibility Value=customer, Equal=Collapsed, NotEqual=Visible}}"
                      Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Header="{l:Config 'EXPORTLIMIT.TITEL'}" Margin="0,4,0,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Content="{l:Config 'EXPORTLIMIT.activated'}" IsChecked="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled}" Margin="0,8"/>
                    <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,8" Content="{l:Config 'EXPORTLIMIT.NETWORK_MODE.clusterModeActivated'}"
                              IsChecked="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsNetworkModeEnabled}"
                              Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}"/>
                    <TextBlock Grid.Row="2" Grid.Column="0" Text="{l:Config 'EXPORTLIMIT.PHASE_MODE.phaseMode'}"
                               Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}"/>
                    <TextBlock Grid.Row="2" Grid.Column="1" Text=":" 
                               Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}"/>
                    <ComboBox HorizontalAlignment="Stretch" Grid.Row="2" Grid.Column="2" ItemsSource="{Binding PhaseModes}" SelectedItem="{Binding SelectedPhaseMode}" 
                              Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}"/>

                    <Grid Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <CheckBox Grid.Row="0" VerticalContentAlignment="Center" HorizontalAlignment="Left"
                                  IsChecked="{Binding Settings.PowerLimitSettings.ExportLimits.EnableFailSafeMode, FallbackValue={x:Null}}">
                            <TextBlock Text="{l:Config 'EXPORTLIMIT.failSafeModeEnabled'}" TextWrapping="Wrap" />
                        </CheckBox>

                        <CheckBox Grid.Row="1" VerticalContentAlignment="Center" HorizontalAlignment="Left"
                                  IsChecked="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.HardLimit.IsEnabled, FallbackValue={x:Null}}">
                            <TextBlock Text="{l:Config 'EXPORTLIMIT.HARDLIMIT.enabled'}" TextWrapping="Wrap" />
                        </CheckBox>

                        <CheckBox Grid.Row="2" VerticalContentAlignment="Center" HorizontalAlignment="Left"
                                  IsChecked="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.SoftLimit.IsEnabled, FallbackValue={x:Null}}">
                            <TextBlock Text="{l:Config 'EXPORTLIMIT.SOFTLIMIT.enabled'}" TextWrapping="Wrap" />
                        </CheckBox>

                        <StackPanel Grid.Row="3" Margin="0,8,0,0">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                <TextBlock Margin="0,0,4,0">
                                    <Run Text="{l:Config 'EXPORTLIMIT.WPEAK'}" /><Run Text=":" />
                                </TextBlock>
                                <TextBox MinHeight="0" TextAlignment="Center" MinWidth="40"
                                         Text="{co:ValidationBinding Path=WattPeakReferenceValue, FallbackValue=20000, StringFormat=F0, Rule={v:MinMaxFloatRule Minimum=0, Maximum=200000, PropertyDisplayName={l:Config 'EXPORTLIMIT.WPEAK'}}}" />
                                <TextBlock Margin="4,0,0,0" Text="W" />
                            </StackPanel>
                            <Slider Value="{Binding WattPeakReferenceValue, Mode=TwoWay, FallbackValue=10000}" HorizontalAlignment="Stretch" TickFrequency="1" IsSnapToTickEnabled="True" Minimum="0" Maximum="20000"/>
                        </StackPanel>

                        <StackPanel Grid.Row="4" Margin="0,8,0,0">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                                        Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.HardLimit.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}">
                                <TextBlock Margin="0,0,4,0">
                                    <Run Text="{l:Config 'EXPORTLIMIT.HARDLIMIT.enabled'}" /><Run Text=":" />
                                </TextBlock>
                                <TextBox MinHeight="0" TextAlignment="Center" MinWidth="40"
                                         Text="{co:ValidationBinding Path=HardLimit, FallbackValue=20000, StringFormat=F0, Rule={v:MinMaxFloatRule Minimum=0, Maximum=200000, PropertyDisplayName={l:Config 'EXPORTLIMIT.HARDLIMIT.enabled'}}}" />
                                <TextBlock Margin="4,0,0,0" Text="W" />
                            </StackPanel>
                            <Slider Value="{Binding HardLimit, Mode=TwoWay, FallbackValue=10000}" HorizontalAlignment="Stretch" TickFrequency="1" IsSnapToTickEnabled="True" Minimum="0" Maximum="20000"
                                    Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.HardLimit.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}" />
                        </StackPanel>

                        <StackPanel Grid.Row="5" Margin="0,4,0,0">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                                        Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.SoftLimit.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}">
                                <TextBlock Margin="0,0,4,0">
                                    <Run Text="{l:Config 'EXPORTLIMIT.SOFTLIMIT.enabled'}" /><Run Text=":" />
                                </TextBlock>
                                <TextBox MinHeight="0" TextAlignment="Center" MinWidth="40"
                                         Text="{co:ValidationBinding Path=SoftLimit, FallbackValue=20000, StringFormat=F0, Rule={v:MinMaxFloatRule Minimum=0, Maximum=200000, PropertyDisplayName={l:Config 'EXPORTLIMIT.SOFTLIMIT.enabled'}}}" />
                                <TextBlock Margin="4,0,0,0" Text="W" />
                            </StackPanel>
                            <Slider Value="{Binding SoftLimit, Mode=TwoWay, FallbackValue=10000}" HorizontalAlignment="Stretch" TickFrequency="1" IsSnapToTickEnabled="True" Minimum="0" Maximum="20000"
                                    Visibility="{Binding Settings.PowerLimitSettings.ExportLimits.ActivePower.SoftLimit.IsEnabled, Converter={co:Bool2Visibility}, FallbackValue=Collapsed}" />
                        </StackPanel>
                    </Grid>
                    <StackPanel Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,16,0,0" Visibility="{Binding ConnectedInverters.Count, FallbackValue=Collapsed, Converter={co:Int2Visibility Value=0, Equal=Collapsed, NotEqual=Visible}}">
                        <TextBlock Text="{x:Static p:Resources.Inverters}" TextAlignment="Left" HorizontalAlignment="Left"/>
                        <DataGrid ColumnWidth="Auto" CanUserAddRows="False" RowHeaderWidth="20"
                                  SelectionUnit="FullRow" SelectionMode="Single"
                                  ItemsSource="{Binding ConnectedInverters.Values}" AutoGenerateColumns="False"
                                  GridLinesVisibility="Vertical"
                                  AlternatingRowBackground="AntiqueWhite"
                                  BorderThickness="1">
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">
                                <Setter Property="ToolTip" Value="{x:Static p:Resources.RuleTooltip}" />
                                <Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" />
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu Placement="Center">
                                            <MenuItem Header="{x:Static p:Resources.AddInverter}"
                                                  Command="{Binding Path=PlacementTarget.(FrameworkElement.Tag).(vm:InverterSettingsViewModel.AddConnectedInverterCommand), RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                            <MenuItem Header="{x:Static p:Resources.DeleteInverter}" Visibility="{Binding IsAutoDetected, Converter={co:Bool2Visibility False=Visible, True=Collapsed}}"
                                                  Command="{Binding Path=PlacementTarget.(FrameworkElement.Tag).(vm:InverterSettingsViewModel.DeleteConnectedInverterCommand), RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}"
                                                  CommandParameter="{Binding Path=PlacementTarget.(FrameworkElement.DataContext),RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.RowStyle>
                        <DataGrid.Resources>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightSkyBlue" />
                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightSkyBlue" />
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />

                            <Style TargetType="DataGridColumnHeader" x:Key="Es">
                                <Setter Property="Padding" Value="10,8" />
                            </Style>

                            <Style TargetType="DataGridCell">
                                <Setter Property="MinHeight" Value="32" />
                                <Setter Property="VerticalContentAlignment" Value="Bottom" />
                                <Setter Property="VerticalAlignment" Value="Bottom" />
                            </Style>


                            <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
                                <Setter Property="Margin" Value="8,2,8,0" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="HorizontalAlignment" Value="Center" />
                                <Setter Property="IsEnabled" Value="{Binding Path=DataContext.(gen24:Gen24ConnectedInverter.IsAutoDetected), Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                            </Style>

                            <Style TargetType="TextBox" x:Key="TextBoxStyle">
                                <Setter Property="Margin" Value="0,0" />
                                <Setter Property="Background" Value="White" />
                                <Setter Property="Padding" Value="6,7,0,0" />
                                <Setter Property="MaxWidth" Value="80" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="VerticalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <EventSetter Event="Validation.Error" Handler="OnValidationChanged" />
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                            </Style>

                            <Style TargetType="TextBlock" x:Key="TextBlockStyle">
                                <Setter Property="Margin" Value="8,0" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                            </Style>

                        </DataGrid.Resources>

                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.status', 'True'}" Binding="{Binding Status}" IsReadOnly="True" SortMemberPath="Status"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.name', 'True'}" Binding="{Binding DisplayName}" IsReadOnly="True" SortMemberPath="DisplayName"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True" SortDirection="Ascending"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.deviceType', 'True'}" Binding="{Binding DeviceType}" IsReadOnly="True" SortMemberPath="DeviceType"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.serial', 'True'}" Binding="{Binding SerialNumber}" IsReadOnly="True" SortMemberPath="SerialNumber"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.hostname', 'True'}" Binding="{Binding Hostname}" IsReadOnly="True" SortMemberPath="HostName"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridTextColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.ipAddress', 'True'}" Binding="{Binding IpAddressString}" IsReadOnly="True" SortMemberPath="IpAddressString"
                                                HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True"
                                                ElementStyle="{StaticResource TextBlockStyle}" EditingElementStyle="{StaticResource TextBoxStyle}" />

                            <DataGridCheckBoxColumn Header="{l:Ui 'SYSTEM_POWER_CONTROL.useInverter', 'True'}" Binding="{Binding UseDevice}" x:Name="CheckBoxColumn"
                                                    ElementStyle="{StaticResource CheckBoxStyle}" IsReadOnly="True"
                                                    SortMemberPath="UseDevice" HeaderStyle="{StaticResource Es}" CanUserReorder="True" CanUserResize="True" CanUserSort="True">
                            </DataGridCheckBoxColumn>

                        </DataGrid.Columns>

                    </DataGrid>
                    </StackPanel>
                </Grid>
            </GroupBox>

            <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,8,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="{x:Static p:Resources.Danger}" Margin="0,0,4,0" VerticalAlignment="Center">
                    <Run Text=":" />
                </TextBlock>
                <ToggleButton Grid.Column="1" Height="18" VerticalAlignment="Center" IsChecked="{Binding EnableDanger}" />
                <Viewbox Grid.Column="3" Height="32" Margin="0,4,-150,0" Visibility="{Binding IsInUpdate, Converter={co:Bool2Visibility False=Hidden}}">
                    <Control Style="{StaticResource BusyAnimationStyle}" Background="Transparent" />
                </Viewbox>
                <c:Toast Height="32" Background="Green" CornerRadius="10" Grid.Column="3" Padding="10,6" Foreground="White" MinWidth="200" Margin="0,0,16,0" Text="{Binding ToastText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Button Grid.Column="4" VerticalAlignment="Center" Content="{x:Static p:Resources.Undo}" Command="{Binding UndoCommand}" IsEnabled="{Binding IsInUpdate, Converter={co:BoolInverter}}" />
                <Button Grid.Column="5" VerticalAlignment="Center" Content="{x:Static p:Resources.Apply}" Command="{Binding ApplyCommand}">
                    <Button.IsEnabled>
                        <MultiBinding Converter="{co:MultiBool2Bool Any=False, All=False, Invalid=False, None=True}">
                            <Binding Path="IsInUpdate" />
                            <Binding Path="HasVisibleNotifiedValidationErrors" />
                        </MultiBinding>
                    </Button.IsEnabled>
                </Button>
            </Grid>
            <GroupBox Style="{StaticResource ErrorGroupBox}" Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="4,0,0,0" />
        </Grid>
    </Grid>
</c:ValidationWindow>